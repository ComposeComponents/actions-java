extends "src/base.pkl"
import "src/common.pkl"

hidden projectName: String
hidden sonatypeEnabled = true
hidden javadocEnabled = false

name = "Build"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
            "release/**"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

permissions = new Mapping {
    ["contents"] = "write"
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["versionCode"] = "${{ steps.run_number.outputs.versionCode }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v0.9.6"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v0.9.6"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Display SemVer"
                run = "echo \"SemVer: ${{ steps.gitversion.outputs.semVer }}\""
            }
        }
    }
    ["build"] = new Job {
        needs = new Listing {
            "version"
        }
        steps = new Listing {
            common.checkout
            common.setupJdk
            (common.gradle(
                "Build", 
                "build"
            )) {
                env = new Mapping {
                    ["ORG_GRADLE_PROJECT_version"] = "${{ needs.version.outputs.version }}"
                }
            }
            new CommandStep {
                name = "Rename AAR"
                run = "mv ./build/libs/\(projectName)-${{ needs.version.outputs.version }}.jar ./\(projectName).jar"
            }
            new ActionStep {
                uses = "actions/upload-artifact@master"
                with = new Mapping {
                    ["name"] = "\(projectName)-jar"
                    ["path"] = "./\(projectName).jar"
                }
            }
        }
    }
    ["release"] = new Job {
        needs = new Listing {
            "version"
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            common.create_release
        }
    }
    ["publish-release"] = new Job {
        needs = new Listing {
            "version"
            "release"
            "build"
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@master"
                with = new Mapping {
                    ["name"] = "\(projectName)-jar"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "actions/upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./\(projectName).jar"
                    ["asset_name"] = "\(projectName)-v${{ needs.version.outputs.version }}.jar"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
    ["publish-sonatype"] = if(sonatypeEnabled) new Job {
        permissions = new Mapping {
            ["contents"] = "read"
        }
        needs = new Listing {
            "version"
        }
        `if` = "github.ref == 'refs/heads/main'"
        steps = new Listing {
            common.checkout
            common.setupJdk
            (common.gradle(
                "Build", 
                """
                -Pversion=${{ needs.version.outputs.version }} 
                -Ppom.url="https://github.com/${{ github.repository }}" 
                -Ppom.scm.connection="scm:git:git://github.com/${{ github.repository }}" 
                -Ppom.scm.developerConnection="scm:git:ssh://github.com/${{ github.repository }}" 
                -Ppom.scm.url="https://github.com/${{ github.repository }}" 
                publishToCentralPortal --no-daemon
                """
            )) {
                env = new Mapping {
                    ["ORG_GRADLE_PROJECT_sonatypePassword"] = "${{ secrets.SONATYPE_PASSWORD }}"
                    ["ORG_GRADLE_PROJECT_sonatypeUsername"] = "${{ secrets.SONATYPE_USERNAME }}"
                    ["ORG_GRADLE_PROJECT_signingKey"] = "${{ secrets.PGP_SECRET }}"
                    ["ORG_GRADLE_PROJECT_signingPassword"] = "${{ secrets.PGP_PASSPHRASE }}"
                }
            }
        }  
    } else null
    ["publish-javadoc"] = if (javadocEnabled)
        new Job {
            permissions = new Mapping {
                ["contents"] = "write"
            }
            needs = new Listing {
                "version"
            }
            steps = new Listing {
                (common.checkout) {
                    with = new Mapping {
                        path = "repository"
                    }
                }
                (common.checkout) {
                    with = new Mapping {
                        ref = "gh-pages"
                        path = "pages"
                    }
                }
                common.setupJdk
                new ActionStep {
                    name = "Setup Gradle"
                    uses = "gradle/actions/setup-gradle@v3"
                }
                new CommandStep {
                    name = "Javadoc with Gradle"
                    run = "./repository/gradlew javadoc"
                }
                new CommandStep {
                    name = "Move to GH Pages Branch"
                    run = "mv ./repository/build/docs/javadoc/* ./pages/javadoc/v${{ needs.version.outputs.version }}/"
                }
                new ActionStep {
                    name = "Generate Directory Listings"
                    uses = "jayanta525/github-pages-directory-listing@v4.0.0"
                    with = new Mapping {
                        ["folder"] = "./pages/javadoc"
                    }
                }
                new ActionStep {
                    uses = "stefanzweifel/git-auto-commit-action@v5"
                    with = new Mapping {
                        ["repository"] = "./pages"
                    }
                }
            }
        }
    else null
}.toMap().filter((k,v) -> v != null).toMapping()